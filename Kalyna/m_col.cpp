#include "m_col.hpp"

uchar modPolynom(int w) {
	int div = log2(w >> M_POLY);
	int res = w ^ (POLYNOM << div);
	if (res < POW2m_POLY)
		return (uchar)res;
	else
		return modPolynom(res);
}

inline int coeff_mul(uchar uc, uchar coeff) {
	
	switch (coeff) {
	case 0x01:
		return uc;
	case 0x04:
		return uc << 2;
	case 0x05:
		return (uc << 2) ^ uc;
	case 0x06:
		return (uc << 2) ^ (uc << 1);
	case 0x07:
		return (uc << 2) ^ (uc << 1) ^ uc;
	case 0x08:
		return (uc << 3);
	default: return 0;
	}
}

//0xAD, 0x95, 0x76, 0xA8, 0x2F, 0x49, 0xD7, 0xCA
inline int coeff_mul_inv(uchar uc, uchar coeff)
{
	switch (coeff) {
	case 0xAD: //1010 1101
		return (uc << 7) ^ (uc << 5) ^ (uc << 3) ^ (uc << 2) ^ uc; 
	case 0x95: //1001 0101
		return (uc << 7) ^ (uc << 4) ^ (uc << 2) ^ uc;
	case 0x76: //0111 0110
		return (uc << 6) ^ (uc << 5) ^ (uc << 4) ^ (uc << 2) ^ (uc << 1);
	case 0xA8: //1010 1000
		return (uc << 7) ^ (uc << 5) ^ (uc << 3);
	case 0x2F: //0010 1111
		return (uc << 5) ^ (uc << 3) ^ (uc << 2) ^ (uc << 1) ^ uc;
	case 0x49: //0100 1001
		return (uc << 6) ^ (uc << 3) ^ uc;
	case 0xD7: //1101 0111
		return (uc << 7) ^ (uc << 6) ^ (uc << 4) ^ (uc << 2) ^ (uc << 1) ^ uc;
	case 0xCA: //1100 1010
		return (uc << 7) ^ (uc << 6) ^ (uc << 3) ^ (uc << 1);
	default: return 0;
	}
}

void MixColum(uchar *state, int len8) {
	uchar v[8][8] = { { 0x01, 0x01, 0x05, 0x01, 0x08, 0x06, 0x07, 0x04 },
					{ 0x04, 0x01, 0x01, 0x05, 0x01, 0x08, 0x06, 0x07},
					{ 0x07, 0x04, 0x01, 0x01, 0x05, 0x01, 0x08, 0x06},
					{ 0x06, 0x07, 0x04, 0x01, 0x01, 0x05, 0x01, 0x08},
					{ 0x08, 0x06, 0x07, 0x04, 0x01, 0x01, 0x05, 0x01},
					{ 0x01, 0x08, 0x06, 0x07, 0x04, 0x01, 0x01, 0x05},
					{ 0x05, 0x01, 0x08, 0x06, 0x07, 0x04, 0x01, 0x01},
					{ 0x01, 0x05, 0x01, 0x08, 0x06, 0x07, 0x04, 0x01} };
	int tmp[9];
	for (int k = 0; k < len8; k += 8) {
		for (int i = 0; i < 8; i++) {
			tmp[i] = coeff_mul(state[k], v[i][0]);
			for (int j = 1; j < 8; j++)
				tmp[i] ^= coeff_mul(state[k + j], v[i][j]);
		}
		for (int i = 0; i < 8; i++)
			state[k + i] = modPolynom(tmp[i]);
	}
}

void MixColum_inv(uchar *state, int len8) 
{
	uchar v_inv[8][8] = { {0xAD, 0x95, 0x76, 0xA8, 0x2F, 0x49, 0xD7, 0xCA},
						{ 0xCA, 0xAD, 0x95, 0x76, 0xA8, 0x2F, 0x49, 0xD7},
						{ 0xD7, 0xCA, 0xAD, 0x95, 0x76, 0xA8, 0x2F, 0x49},
						{ 0x49, 0xD7, 0xCA, 0xAD, 0x95, 0x76, 0xA8, 0x2F},
						{ 0x2F, 0x49, 0xD7, 0xCA, 0xAD, 0x95, 0x76, 0xA8},
						{ 0xA8, 0x2F, 0x49, 0xD7, 0xCA, 0xAD, 0x95, 0x76},
						{ 0x76, 0xA8, 0x2F, 0x49, 0xD7, 0xCA, 0xAD, 0x95},
						{ 0x95, 0x76, 0xA8, 0x2F, 0x49, 0xD7, 0xCA, 0xAD}};
	int tmp[9];
	for (int k = 0; k < len8; k += 8) {
		for (int i = 0; i < 8; i++) {
			tmp[i] = coeff_mul_inv(state[k], v_inv[i][0]);
			for (int j = 1; j < 8; j++)
				tmp[i] ^= coeff_mul_inv(state[k + j], v_inv[i][j]);
		}
		for (int i = 0; i < 8; i++)
			state[k + i] = modPolynom(tmp[i]);
	}
}

void TestMcol() { 

	unsigned __int8 state[10][17] = {
		{0x9A,0x2B,0x1E,0xAC,0x7C,0x98,0xDD,0x3D,0x91,0x4A,0xCF,0x17,0x76,0xEE,0x89,0x1B},	//done
		{0x81,0xD1,0x3F,0xB2,0xBF,0xD1,0xF7,0x6F,0xEA,0x4B,0x55,0x42,0x75,0x62,0xED,0xE1},	//done
		{0x8F,0xDA,0x86,0x33,0x8F,0x6A,0x9C,0x7A,0xBE,0xA6,0x3A,0xB2,0xED,0x4D,0x51,0x39},	//shiftrow
		{0x24,0x9A,0x64,0x8F,0x71,0x47,0x75,0xDF,0xE7,0x0E,0x2C,0x22,0xE0,0xFE,0x9F,0x0F},	//shiftrow
		{0xFA,0x64,0x88,0x81,0x31,0xB1,0xFA,0x10,0x42,0x44,0xC6,0x07,0x65,0xED,0x68,0xAD},	//shiftrow
		{0xC5,0xED,0x3F,0xA4,0x4D,0x79,0x90,0xFE,0x89,0xEE,0x6C,0xDA,0x99,0x64,0x7C,0x57},	//shiftrow
		{0x1D,0xC3,0x9F,0x95,0x53,0x97,0xE9,0xF4,0x14,0x6C,0x93,0xB7,0xF3,0x48,0x6E,0xE0},	//shiftrow
		{0x9A,0xEC,0x10,0x45,0xC3,0x8C,0x35,0x93,0xBB,0xA1,0x16,0x4C,0xD7,0x0D,0x80,0x03},	//shiftrow
		{0x97,0x03,0x80,0xC8,0xB3,0x9E,0x90,0x9A,0x2C,0x7C,0xF1,0x48,0x00,0x55,0xE5,0xE5},	//shiftrow
		{0xFF,0x66,0x12,0x01,0x78,0x9C,0x58,0x1D,0x03,0x74,0xD3,0x4D,0x59,0x83,0xC4,0x53} };//shiftrow
	
	int len8 = 8;
	for (int i = 0; i < 10; i++) {
		cout << i << ". " << endl;
		printuc(state[i], len8);
		MixColum(state[i], len8);
		printuc(state[i], len8);
		cout << endl;
		MixColum_inv(state[i], len8);
		printuc(state[i], len8);
		cout << endl << endl;
	}
	
}